import paho.mqtt.client as mqtt
import uuid
import time
import requests
import json
from decimal import Decimal
import urllib
from .configparser import ConfigParser

CONFIG = {}

def on_connect(client, userdata, flags, rc):
    if rc == 0:
        print("Connected to MQTT broker.")
    else:
        print("Connection error. RC: ", rc)

def on_message(client, userdata, message):
    try:
        print(type(message.payload))
        print("hejsa")
        m = "set the temperature in {1} to {0}".format((((Decimal(message.payload.decode("UTF-8")) * 9/5) + 32)), 'room one')
        print(m)
        x = urllib.parse.quote(m)
        print(x)
        u = "https://virtual-device.bespoken.io/process?user_id=alexa-3b9b2e15-d625-41bc-908b-14d369492180&message=" + x
        print(u)
        response = requests.get(u)
        print(response.text)
    except Exception as e:
        print(e)


def hejsa():
    client = mqtt.Client("Danfoss2Mqtt")
    client.connect("mqtt.lan.chown.dk")
    client.on_message=on_message
    client.subscribe("temp/target", qos=0)
    client.loop_start()
 
    while True:
        print("Looping")
        url = "https://virtual-device.bespoken.io/process?user_id=alexa-3b9b2e15-d625-41bc-908b-14d369492180&message=What%20is%20the%20temperature%20at%20room%201?"
        response = requests.get(url)
        print(response.text)
        data = json.loads(response.text)
        print(data["transcript"])
    
        x = data["transcript"].split(" ")
        client.publish("temp/louis",  ((Decimal(x[5]) - 32) * 5/9).to_eng_string())
    
        time.sleep(600)

def parse_config():
    global CONFIG
    config = ConfigParser().parse_config("/home/jonas/test.yaml")
    print(config)
    CONFIG = config

def main():
    parse_config()
    print(CONFIG)

if __name__ == "__main__":
    main()

